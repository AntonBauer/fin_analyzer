# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - fin-analyze-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=finanalyzer
      - POSTGRES_PASSWORD=1pass!
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 30s
      timeout: 5s
      retries: 3

  backend:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: final
    ports:
      - 80:8080

  client:
    depends_on: 
      - backend
    build:
      context: "../frontend"
      target: final

volumes:
  fin-analyze-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
# secrets:
#   db-password:
#     file: db/password.txt

